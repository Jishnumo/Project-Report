
import os
import numpy as np
import librosa
from tensorflow.keras.models import load_model
from sklearn.preprocessing import LabelEncoder

def extract_features(file_path, mfcc=True, chroma=True, mel=True):
    """
    Function to extract audio features from an audio file.

    Parameters:
    - file_path (str): Path to the audio file.
    - mfcc (bool): Whether to include MFCCs.
    - chroma (bool): Whether to include chroma features.
    - mel (bool): Whether to include mel spectrogram features.

    Returns:
    - features (np.ndarray): Extracted features.
    """
    try:
        audio, sr = librosa.load(file_path, sr=None)
        features = []
        if mfcc:
            mfccs = librosa.feature.mfcc(y=audio, sr=sr, n_mfcc=20)
            features.extend(np.mean(mfccs.T, axis=0))
        if chroma:
            chroma = librosa.feature.chroma_stft(y=audio, sr=sr)
            features.extend(np.mean(chroma.T, axis=0))
        if mel:
            mel = librosa.feature.melspectrogram(y=audio, sr=sr)
            features.extend(np.mean(mel.T, axis=0))
        return np.array(features)
    except Exception as e:
        print("Error encountered while parsing file: ", file_path)
        return None

def predict_speaker(audio_file, model, label_encoder):
    # Extract features from the audio file
    features = extract_features(audio_file)
    if features is not None:
        # Reshape features to match the input shape of the model
        features = features.reshape(1, -1)
        # Make predictions
        predictions = model.predict(features)
        # Get the index of the predicted class
        predicted_index = np.argmax(predictions)
        # Decode the predicted index using the label encoder
        predicted_label = label_encoder.inverse_transform([predicted_index])[0]
        return predicted_label
    else:
        return None

if __name__ == "__main__":
    # Load the trained model
    model = load_model('speaker_identification_model.h5')

    # Load the label encoder
    label_encoder_classes = np.load('label_encoder.npy', allow_pickle=True)
    label_encoder = LabelEncoder()
    label_encoder.classes_ = label_encoder_classes

    # Path to the input audio file for prediction
    audio_file_path = 'C:\\Users\\jishn\\OneDrive\\Desktop\\Speakerr\\16000_pcm_speeches\\Magaret_Tarcher\\8.wav'


    # Make predictions
    predicted_label = predict_speaker(audio_file_path, model, label_encoder)

    if predicted_label is not None:
        print("Predicted speaker:", predicted_label)
    else:
        print("Error encountered during prediction.")
